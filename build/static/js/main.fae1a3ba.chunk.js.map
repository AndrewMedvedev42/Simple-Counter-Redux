{"version":3,"sources":["App.js","reportWebVitals.js","reducers/counter.js","reducers/isLogged.js","reducers/main.js","index.js"],"names":["App","counter","useSelector","state","dispatch","useDispatch","className","onClick","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","counterReducer","action","isLoggedReducer","allReducers","combineReducers","isLogged","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAkBeA,MAff,WACE,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAWC,cACjB,OACE,0BAASC,UAAU,MAAnB,UACE,6BAAKL,IACL,gCACE,wBAAQM,QAAS,WAAKH,EAAS,CAACI,KAAK,OAArC,eACA,wBAAQD,QAAS,WAAKH,EAAS,CAACI,KAAK,OAArC,eACA,wBAAQD,QAAS,WAAKH,EAAS,CAACI,KAAK,WAArC,0BCAOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCMCQ,EAbQ,WAAsB,IAArBf,EAAoB,uDAAd,EAAGgB,EAAW,uCACxC,OAAQA,EAAOX,MACX,IAAK,IACD,OAAOL,EAAQ,EACnB,IAAK,IACD,OAAOA,EAAQ,EACnB,IAAK,QACD,OAAe,EACnB,QACI,OAAOA,ICDJiB,EARS,WAA0B,IAAzBjB,EAAwB,wDAAXgB,EAAW,uCAC7C,OAAQA,EAAOX,MACX,IAAK,UACD,OAAQL,EACZ,QACI,OAAOA,ICIJkB,EALKC,YAAgB,CAChCrB,QAASiB,EACTK,SAAUH,ICIRI,EAAQC,YAAYJ,EAAaK,OAAOC,8BAAgCD,OAAOC,gCAGrFC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BvB,M","file":"static/js/main.fae1a3ba.chunk.js","sourcesContent":["import {useSelector, useDispatch} from \"react-redux\"\nimport \"./App.css\"\n\nfunction App() {\n  const counter = useSelector(state => state.counter)\n  const dispatch = useDispatch()\n  return (\n    <section className=\"App\">\n      <h1>{counter}</h1>\n      <div>\n        <button onClick={()=>{dispatch({type:\"+\"})}}>+</button>\n        <button onClick={()=>{dispatch({type:\"-\"})}}>-</button>\n        <button onClick={()=>{dispatch({type:\"RESET\"})}}>Reset</button>\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const counterReducer = (state=0, action) => {\n    switch (action.type) {\n        case \"+\":\n            return state + 1;\n        case \"-\":\n            return state - 1;\n        case \"RESET\":\n            return state = 0;\n        default:\n            return state;\n    }\n}\n\nexport default counterReducer","const isLoggedReducer = (state=false, action) => {\n    switch (action.type) {\n        case \"SIGN_IN\":\n            return !state;\n        default:\n            return state;\n}}\n\nexport default isLoggedReducer","import counterReducer from \"./counter\"\nimport isLoggedReducer from \"./isLogged\"\nimport {combineReducers} from \"redux\"\n\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    isLogged: isLoggedReducer\n})\n\nexport default allReducers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {createStore} from \"redux\"\nimport {Provider} from \"react-redux\"\nimport allReducers from \"./reducers/main\"\n\n\nconst store = createStore(allReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}